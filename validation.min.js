(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
	typeof define === 'function' && define.amd ? define(factory) :
	(global.validation = factory());
}(this, (function () { 'use strict';

var regex = {
  email: /^(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/
};

var RULES = {
  required: {
    message: "Required",
    method: function method(el) {
      if (el.type === "checkbox") {
        return el.checked;
      } else if (el.type === "radio") {
        var name = el.name;
        return el.parentNode.querySelectorAll("input[name=" + name + "]:checked").length > 0;
      }
      return el.value !== "";
    }
  },
  email: {
    message: "E-mail is wrong",
    method: function method(el) {
      return el.value === "" || regex.email.test(el.value.trim());
    }
  },
  emails: {
    message: "E-mail is wrong",
    method: function method(el) {
      return el.value === "" || el.value.split(/;|,/).every(function (v) {
        return regex.email.test(v.trim());
      });
    }
  }
};

var _arguments = arguments;
var VALIDATE = "validate";
var VALIDATE_POPUP = "validate-popup";
var DATA_VALIDATE = "data-validate";
var VALIDATE_ERROR = "validate-error";
var ACTIVE = "active";
var OPTIONS = {
  events: ["change", "paste", "blur", "keyup"]
};
var CUSTOM_CLASS_STYLES = "\n  {0} {\n    border-color: #D10000 !important;\n  }\n  {0}:before {\n    opacity: 1 !important;\n    {1}\n  }\n  {0}:after {\n    opacity: 1 !important;\n  }";
var document = window.document;

var _customSelector = "";

var throttle = function throttle(fn) {
  var threshhold = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 250;
  var scope = arguments[2];

  var last = void 0,
      deferTimer = void 0;
  return function () {
    var now = +new Date(),
        args = _arguments;
    if (last && now < last + threshhold) {
      clearTimeout(deferTimer);
      deferTimer = setTimeout(function () {
        last = now;
        fn.apply(scope, args);
      }, threshhold);
    } else {
      last = now;
      fn.apply(scope, args);
    }
  };
};

var getMessage = function getMessage(input) {
  return input.getAttribute(DATA_VALIDATE).split(",").map(function (type) {
    return type.trim();
  }).filter(function (type) {
    return !RULES[type].method(input);
  }).map(function (type) {
    return RULES[type].message;
  }).join(", ");
};

var createPopup = function createPopup(input) {
  var popup = document.createElement("div");
  popup.classList.add(VALIDATE_POPUP);
  var wrap = document.createElement("div");
  wrap.appendChild(popup.cloneNode(true));
  input.insertAdjacentHTML("beforebegin", wrap.innerHTML);
  popup = input.previousElementSibling;
  return popup;
};

var forceToggleClass = function forceToggleClass(el, className, force) {
  if (force && !el.classList.contains(className)) {
    el.classList.add(className);
  } else if (!force && el.classList.contains(className)) {
    el.classList.remove(className);
  }
};

var show = function show(input, message) {
  if (input.offsetWidth === 0 && input.offsetHeight === 0) {
    return;
  }

  forceToggleClass(input, VALIDATE_ERROR, true);
  var popup = input.previousElementSibling;

  if (!popup || !popup.matches("." + VALIDATE_POPUP)) {
    //
    // Create popup if it doesn't exist
    //
    popup = createPopup(input);
  }
  popup.innerHTML = message;
  window.setTimeout(function () {
    var left = input.clientWidth < popup.clientWidth ? ~~(input.offsetLeft + input.offsetWidth / 2 - 14) + 1 : input.offsetLeft + input.clientWidth - popup.clientWidth + 1;
    var top = input.offsetTop;
    popup.style.left = left + "px";
    popup.style.top = top + "px";
    popup.style.marginTop = -(popup.clientHeight + 8) + "px";
    forceToggleClass(popup, ACTIVE, true);
    forceToggleClass(popup, "short-version", input.clientWidth < popup.clientWidth);
  }, 0);
};

var _hide = function _hide(input) {
  forceToggleClass(input, VALIDATE_ERROR, false);
  var popup = input.previousElementSibling;
  if (popup && popup.matches("." + VALIDATE_POPUP)) {
    forceToggleClass(popup, ACTIVE, false);
  }
};

var toggle = function toggle(input, message) {
  if (message) {
    show(input, message);
  } else {
    _hide(input);
  }
};

var onAction = function onAction(e) {
  var input = e.target;
  if (!input.matches("." + VALIDATE)) {
    return;
  }
  var message = getMessage(input);

  if (input.type === "radio") {
    var name = input.name;
    var rbs = document.querySelectorAll("input[name=\"" + name + "\"]");
    [].forEach.call(rbs, function (rb) {
      return toggle(rb, message);
    });
  } else {
    toggle(input, message);
  }
};

var getEl = function getEl() {
  var el = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "body";
  return typeof el === "string" ? document.querySelector(el) || document.body : el;
};

var getInputs = function getInputs(el) {
  return el.querySelectorAll("." + VALIDATE);
};

var onClick = function onClick(e) {
  var popup = e.target;
  if (!popup.matches("." + VALIDATE_POPUP)) {
    return;
  }
  var input = popup.nextElementSibling;
  if (input.matches("." + VALIDATE)) {
    _hide(input);
  }
};

var onSubmit = function onSubmit(e) {
  var isValid = validation.validate(e.target);
  if (isValid) {
    return true;
  }
  e.preventDefault();
  return false;
};

var onResize = throttle(function () {
  [].forEach.call(document.querySelectorAll("." + VALIDATE_POPUP), function (popup) {
    return forceToggleClass(popup, ACTIVE, false);
  });
}, 1000);

var setupEventHandlers = function setupEventHandlers(el, setup) {
  el = getEl(el);
  var action = setup ? "addEventListener" : "removeEventListener";
  var inputs = getInputs(el);
  [].forEach.call(inputs, function (input) {
    return OPTIONS.events.forEach(function (e) {
      return input[action](e, onAction);
    });
  });

  document[action]("click", onClick);

  if (el.nodeName === "FORM") {
    el[action]("submit", onSubmit);
  }

  window[action]("resize", onResize);
};

var validation = {
  /**
   * Initialize the validation fields
   *
   * @param {Element|string} el Container or specific form
   * @param {object} options [Optional] Set of the properties
   *  - events: [string]
   * @returns {object} validation instance (chain call)
   */
  init: function init(el, options) {
    Object.assign(OPTIONS, options);
    setupEventHandlers(el, true);
    return validation;
  },

  /**
   * Predefined set of the Rules
   */
  rules: RULES,

  /**
   * Deactivate the validation fields
   *
   * @param {Element|string} Container or specific form
   * @returns {object} validation instance (chain call)
   */
  destroy: function destroy(el) {
    validation.hide(el);
    setupEventHandlers(el, false);
    return validation;
  },

  /**
   * Hide all opened popups inside of the containers
   *
   * @param {Element|string} Container or specific form
   * @returns {object} validation instance (chain call)
   */
  hide: function hide(el) {
    el = getEl(el);
    var inputs = getInputs(el);
    [].forEach.call(inputs, function (input) {
      return _hide(input);
    });
    return validation;
  },

  /**
   * Show error popups inside of the container
   *
   * @param {Element} el Container
   * @returns {object} validation instance (chain call)
   */
  highlight: function highlight(el) {
    el = getEl(el);
    var inputs = getInputs(el);
    [].forEach.call(inputs, function (input) {
      return onAction({ target: input });
    });
    return validation;
  },

  /**
   * Check if all input fields inside of the container are valid
   *
   * @param {Element} el Container
   * @returns {boolean} True if all input fields inside of the container are valid
   */
  isValid: function isValid(el) {
    el = getEl(el);
    var inputs = getInputs(el);
    var valid = [].every.call(inputs, function (input) {
      return !getMessage(input);
    });
    if (_customSelector && el.querySelectorAll(_customSelector).length > 0) {
      valid = false;
    }
    return valid;
  },

  /**
   * Validate all input fields in the DOM container
   *
   * @param {Element} el Container
   * @returns {boolean} True if all input fields inside of the container are valid
   */
  validate: function validate(el) {
    validation.highlight(el);
    return validation.isValid(el);
  },

  /**
   * Add class validation. For external libraries that can
   * set/remove className of the element
   *
   * For instance, braintree-hosted-fields-invalid class is
   * set by braintree client library when iframe with the
   * input fieldan error detects an error, More info here:
   * https://developers.braintreepayments.com/guides/hosted-fields/styling/javascript/v2
   *
   * @param {string} selector Selector that indicates that the field is invalid
   * @param {string} Optional: message. "Invalid" by default
   * @returns {object} validation instance (chain call)
   */
  addClassValidation: function addClassValidation(selector) {
    var msg = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'Invalid';

    var styles = selector.split(",").map(function (s) {
      return CUSTOM_CLASS_STYLES.replace(/\{0\}/gi, s).replace(/\{1\}/gi, !msg ? "" : "content: '" + msg + "' !important;");
    }).join("");
    var styleTag = document.createElement("style");
    styleTag.innerHTML = styles;
    document.head.appendChild(styleTag);
    _customSelector = _customSelector + (_customSelector === "" ? "" : ",") + selector;
    return validation;
  }
};

return validation;

})));
